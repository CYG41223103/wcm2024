var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:  https://mde.tw/cmsimde_site \n 網誌:  https://mde.tw/cmsimde_site/blog \n 簡報:  https://mde.tw/cmsimde_site/reveal \n 倉儲: https://github.com/CYG41223103/wcm2024/settings/pages \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'W6', 'text': '第六週實習操作: \n \n 根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用 \xa0git 解決內容管理問題? \n 假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中. \n \n', 'tags': '', 'url': 'W6.html'}, {'title': '1.', 'text': 'Git 是一款分散式版本控制系統，最初由Linus Torvalds在2005年為了協調Linux核心開發而創建的。Git 的發展歷史可以追溯到Linux社區對於現有版本控制系統的不滿，尤其是對BitKeeper的不滿，因此Torvalds開始開發一個新的解決方案。Git 的設計目標是速度、資料完整性和支援分散式、非線性工作流。 \n Linus Torvalds是Git的創始人之一，他在Linux開發中遇到的挑戰驅使他創建了Git。其他貢獻者也包括Junio Hamano等人。Git的發展在全球開發者社區中不斷得到貢獻和改進，成為了最受歡迎的版本控制系統之一。 \n 對於一般的專業人士，Git提供了強大的版本控制和協作工具，能夠有效解決內容管理問題。以下是一般專業人士如何利用Git解決內容管理問題的一些方法： \n \n \n 版本控制 ：Git允許使用者追蹤文件的修改歷史，這對於團隊合作和追蹤個人工作進度非常重要。使用Git，您可以輕鬆地比較不同版本之間的差異，並恢復到先前的版本。 \n \n \n 分支管理 ：Git的分支功能使得可以同時進行多個功能的開發，而不會干擾主要的代碼庫。這使得團隊能夠並行開發新功能、修復錯誤或進行實驗性的更改，而不會影響主要產品的穩定性。 \n \n \n 合併和解決衝突 ：當多個開發者在同一份代碼上工作時，可能會出現衝突。Git提供了合併工具，可以自動合併不同版本的代碼，並提供了解決衝突的機制，以確保團隊能夠有效地協作。 \n \n \n 遠程存儲和協作 ：Git可以與遠程存儲庫（如GitHub、GitLab或Bitbucket）集成，這使得團隊成員可以輕鬆地共享代碼、協作開發。通過遠程存儲庫，團隊成員可以在不同的地理位置工作，並且可以隨時隨地訪問最新的代碼。 \n \n \n 代碼審查 ：Git可以與代碼審查工具集成，例如GitHub的Pull Request或GitLab的Merge Request，這使得團隊能夠進行代碼審查，確保代碼的質量和一致性。 \n \n \n 總的來說，Git提供了一個強大而靈活的工具，能夠有效地解決內容管理問題，並促進團隊的合作和生產力。 \n', 'tags': '', 'url': '1..html'}, {'title': '2.', 'text': '', 'tags': '', 'url': '2..html'}, {'title': '1. 安裝Git客戶端和Git服務器：', 'text': '安裝Git客戶端： \n 前往Git官方網站（ https://git-scm.com/）下載Git  for Windows安裝程式，然後按照指示進行安裝。安裝完成後，在命令提示符或PowerShell中檢查是否成功安裝了Git，可以運行以下命令來確認版本： \n \n git --version  \n \n 安裝Git服務器： \n 在Windows上設置Git服務器，您可以使用多種方法，其中一個簡單的方法是使用GitLab或者是安裝Git的SSH服務器。 \n \n \n 使用GitLab ：前往GitLab官方網站（ https://about.gitlab.com/install/）按照指示安裝GitLab  Community Edition。GitLab是一個完整的Git服務器，提供了用戶友好的Web界面和豐富的功能。 \n \n \n 安裝Git的SSH服務器 ：您也可以在Windows上安裝Git的SSH服務器，以提供遠程訪問。您可以使用OpenSSH for Windows（ https://github.com/PowerShell/Win32-OpenSSH/releases）或者是Cygwin（https://www.cygwin.com/）。 \n \n \n', 'tags': '', 'url': '1. 安裝Git客戶端和Git服務器：.html'}, {'title': '2. 設置Git客戶端和Git服務器：', 'text': '設置Git客戶端： \n 使用Git客戶端，您可以克隆遠程存儲庫、創建新的代碼庫、提交更改等。首先，請確保您已經設置了全局的使用者名稱和電子郵件地址： \n \n git config --global user.name  "Your Name" \n git config --global user.email  "your.email@example.com" \n \n 設置Git服務器： \n 根據您使用的Git服務器，請按照相應的文檔進行配置。如果您使用GitLab，則可以通過Web界面輕鬆設置用戶、項目等。 \n', 'tags': '', 'url': '2. 設置Git客戶端和Git服務器：.html'}, {'title': '3. 進行演示：', 'text': '在演示中，您可以展示如何使用Git客戶端（如命令行或圖形用戶界面）來執行常見的Git操作，例如克隆存儲庫、提交更改、推送到遠程存儲庫等。同時，您還可以展示如何通過Git服務器來管理遠程存儲庫，例如設置訪問權限、查看提交歷史等。 \n', 'tags': '', 'url': '3. 進行演示：.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};